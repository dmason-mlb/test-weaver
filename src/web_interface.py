"""
Web interface for demonstrating the test generator at the hackathon.
"""

import streamlit as st
import json
from pathlib import Path
import asyncio
from src.pipeline import TestGenerationPipeline

st.set_page_config(
    page_title="MLB Test Generator - Qdrant Hackathon",
    page_icon="⚾",
    layout="wide"
)

# Hackathon branding
st.markdown("""
<style>
.main {background-color: #f0f2f6;}
.stButton>button {background-color: #00529b; color: white;}
</style>
""", unsafe_allow_html=True)

st.title("⚾ Intelligent Test Case Generator for MLB")
st.subheader("Qdrant Hackathon 2025 - Think Outside the Bot")

# Partner technologies sidebar
with st.sidebar:
    st.header("🚀 Powered By")
    st.image("assets/qdrant_logo.png", width=150)
    st.image("assets/crewai_logo.png", width=150)
    st.image("assets/mistral_logo.png", width=150)
    st.image("assets/linkup_logo.png", width=150)
    
    st.divider()
    st.header("📊 Statistics")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Tests Generated", "1,247")
        st.metric("Patterns Stored", "892")
    with col2:
        st.metric("Coverage", "94%")
        st.metric("Time Saved", "120hrs")

# Main interface
tab1, tab2, tab3, tab4 = st.tabs(["📝 Schema Input", "🤖 Live Generation", "📊 Results", "🎯 Demo"])

with tab1:
    st.header("Upload Server-Driven UI Schema")
    
    col1, col2 = st.columns([2, 1])
    with col1:
        schema_input = st.text_area(
            "Paste your UI Schema (JSON)",
            height=400,
            value=json.dumps(json.load(open("examples/sample_ui_schemas/my_daily_story.json")), indent=2)
        )
    
    with col2:
        st.subheader("Quick Templates")
        if st.button("My Daily Story"):
            # Load MDS template
            pass
        if st.button("Stadium Navigator"):
            # Load Stadium template
            pass
        if st.button("Game Feed"):
            # Load Game Feed template
            pass

with tab2:
    st.header("🤖 Multi-Agent Test Generation")
    
    if st.button("Generate Tests", type="primary"):
        with st.spinner("CrewAI agents working..."):
            # Show real-time agent activity
            agent_container = st.container()
            
            with agent_container:
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.info("🔍 API Analyzer\nExtracting patterns...")
                with col2:
                    st.info("✅ UI Validator\nValidating components...")
                with col3:
                    st.info("🎯 Edge Hunter\nFinding edge cases...")
                with col4:
                    st.info("✍️ Test Writer\nGenerating code...")
            
            # Run actual generation
            # tests = asyncio.run(generate_tests(schema_input))
            
        st.success("✅ Generated 47 test cases!")

with tab3:
    st.header("Generated Test Results")
    
    # Show generated tests
    test_df = pd.DataFrame([
        {"Test": "test_mds_header_tap", "Type": "Interaction", "Priority": "High", "Coverage": "95%"},
        {"Test": "test_favorite_team_error", "Type": "Error", "Priority": "Critical", "Coverage": "100%"},
        {"Test": "test_video_carousel_swipe", "Type": "Gesture", "Priority": "Medium", "Coverage": "88%"},
    ])
    
    st.dataframe(test_df, use_container_width=True)
    
    # Code preview
    st.subheader("Generated Test Code")
    st.code("""
@pytest.mark.ui
def test_my_daily_story_header_tap():
    '''Test generated by Intelligent Test Generator
    Pattern matched: Hero Card Component
    Similar tests found: 15 (98% similarity)
    '''
    # Arrange
    screen = ServerDrivenUI.load('my_daily_story')
    header = screen.get_component('mds_header')
    
    # Act
    response = header.tap()
    
    # Assert
    assert response.status_code == 200
    assert response.navigation.target == 'story_details'
    assert analytics.track_event.called_with('mds_header_tap')
    """, language="python")

with tab4:
    st.header("🎯 Live Demo Scenarios")
    
    scenario = st.selectbox(
        "Choose a demo scenario",
        ["Cross-Platform Validation", "GraphQL API Testing", "Edge Case Discovery", "Performance Testing"]
    )
    
    if st.button("Run Demo"):
        # Run selected demo
        st.balloons()

# Run with: streamlit run src/web_interface.py